[{"content":"I am a student in my 3rd year at Queen\u0026rsquo;s University, currently studying Computer Engineering.\nMy primary interests lie in low level programming, and understanding how computers work, however I have also recently taken a light interest in full stack web development.\nHere you can find my projects and links to contact me.\n","date":"6 November 2023","permalink":"/","section":"","summary":"I am a student in my 3rd year at Queen\u0026rsquo;s University, currently studying Computer Engineering.","title":""},{"content":"Rockpro64 that I use to store files that I want access to from anywhere (uses a VPN), and for jellyfin.\nRuns jellyfin and tailscale VPN in docker containers.\nI would like to try doing some stuff with the GPIO pins on the rockpro, but i\u0026rsquo;ll have to look into that more.\n","date":"6 November 2023","permalink":"/projects/sbc/","section":"Projects","summary":"Rockpro64 that I use to store files that I want access to from anywhere (uses a VPN), and for jellyfin.","title":"Rockpro 64 SBC"},{"content":" Repo\nI started this project in the summer after having completed a computer architecture course at school. That course was my favorite course of that semester and I wanted to further develop my understanding a similar topic.\nTo do that I decided to start working on an emulator.\nI wanted to try something a little complex but hopefully not too difficult to write so I chose to emulate the original GameBoy. I wanted to do this from scratch with only my own knowledge of how a cpu works so I started to do some research on the console.\nThe GameBoy uses a Sharp SM83, which is a slightly modified Z80 (two sets of prefix instructions are missing, and a couple others were replaced). It is also a CISC instruction set so I had to figure out how that worked on my own because I had learnt RISC in my course.\nMy language of choice to code the project was Rust. I already had a strong understanding of C so I wanted to learn another fast low-level language.\nNot completed\u0026hellip;\n","date":"13 September 2023","permalink":"/projects/cassowary-gb/","section":"Projects","summary":"Repo","title":"Cassowary GB"},{"content":" Repo\nI first started this project because of an academic project where we were tasked with making a CPU in verilog. We got to a point where we had to start decoding instructions which meant we\u0026rsquo;d have to convert assembly instructions to their respective machine code.\nThis was a fairly cumbersome process (mapping everything by hand) so I decided to write a python script to automate this process. Using my understanding of assembly that I learnt through my emulator as well as school, I was able to quickly write a script that could convert all the instructions that we were told to use in class, to machine code.\nAt the moment, it can hardly be called an assembler due to it\u0026rsquo;s lack of features, however I do plan on adding a couple of things to it, and I might even go outside the scope of my school project for some things (interpreter??).\nFeatures that are currently supported are:\nconverting files to hex converting single instructions to hex binary, signed/unsigned decimal, hex immediate value representations Planned to support:\nexponential immediate values (e.g. 10e3) signed binary and hex macro immediate values location tags (for branches, etc) initializing locations in memory to data (strings, integers, etc) maybe maybe interpreter ","date":"13 September 2023","permalink":"/projects/minisrc-assembler/","section":"Projects","summary":"Repo","title":"Mini SRC Assembler"},{"content":"Personal Projects that are mostly WIP\n","date":"13 September 2023","permalink":"/projects/","section":"Projects","summary":"Personal Projects that are mostly WIP","title":"Projects"}]